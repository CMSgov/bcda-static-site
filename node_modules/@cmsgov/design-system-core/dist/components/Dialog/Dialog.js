"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Dialog = void 0;

var _reactAriaModal = _interopRequireDefault(require("react-aria-modal"));

var _Button = _interopRequireDefault(require("../Button/Button"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Dialog = function Dialog(props) {
  var actions = props.actions,
      actionsClassName = props.actionsClassName,
      ariaCloseLabel = props.ariaCloseLabel,
      children = props.children,
      className = props.className,
      closeButtonSize = props.closeButtonSize,
      closeButtonVariation = props.closeButtonVariation,
      closeText = props.closeText,
      escapeExitDisabled = props.escapeExitDisabled,
      headerClassName = props.headerClassName,
      heading = props.heading,
      onExit = props.onExit,
      size = props.size,
      title = props.title,
      modalProps = _objectWithoutProperties(props, ["actions", "actionsClassName", "ariaCloseLabel", "children", "className", "closeButtonSize", "closeButtonVariation", "closeText", "escapeExitDisabled", "headerClassName", "heading", "onExit", "size", "title"]);

  if (process.env.NODE_ENV !== 'production') {
    if (props.title) {
      console.warn("[Deprecated]: Please remove the 'title' prop in <Button>, use 'heading' instead. This prop has been renamed and will be removed in a future release.");
    }
  }

  var dialogClassNames = (0, _classnames.default)('ds-c-dialog', 'ds-base', className, size && "ds-c-dialog--".concat(size));
  var headerClassNames = (0, _classnames.default)('ds-c-dialog__header', headerClassName);
  var actionsClassNames = (0, _classnames.default)('ds-c-dialog__actions', actionsClassName);
  /* eslint-disable jsx-a11y/no-redundant-roles */

  return _react.default.createElement(_reactAriaModal.default, _extends({
    dialogClass: dialogClassNames,
    focusDialog: true,
    escapeExits: !escapeExitDisabled,
    includeDefaultStyles: false,
    onExit: onExit,
    titleId: "dialog-title dialog-content",
    underlayClass: "ds-c-dialog-wrap"
  }, modalProps), _react.default.createElement("div", {
    role: "document"
  }, _react.default.createElement("header", {
    className: headerClassNames,
    role: "banner"
  }, // TODO: make heading required after removing title
  (title || heading) && _react.default.createElement("h1", {
    className: "ds-h2",
    id: "dialog-title"
  }, heading), _react.default.createElement(_Button.default, {
    "aria-label": ariaCloseLabel,
    className: "ds-c-dialog__close",
    onClick: onExit,
    size: closeButtonSize,
    variation: closeButtonVariation
  }, closeText)), _react.default.createElement("main", {
    role: "main"
  }, _react.default.createElement("div", {
    id: "dialog-content"
  }, children)), actions && _react.default.createElement("aside", {
    className: actionsClassNames,
    role: "complementary"
  }, actions)));
};

exports.Dialog = Dialog;
Dialog.defaultProps = {
  ariaCloseLabel: 'Close modal dialog',
  closeButtonVariation: 'transparent',
  closeText: 'Close',
  escapeExitDisabled: false,
  underlayClickExits: false
};
Dialog.propTypes = {
  /**
   * If `true`, the modal will receive a role of `alertdialog`, instead of its
   * default `dialog`. The `alertdialog` role should only be used when an
   * alert, error, or warning occurs.
   */
  alert: _propTypes.default.bool,

  /**
   * Provide a **DOM node** which contains your page's content (which the modal should render
   * outside of). When the modal is open this node will receive `aria-hidden="true"`.
   * This can help screen readers understand what's going on.
   * Also see `getApplicationNode`.
   */
  applicationNode: function applicationNode(props, propName, componentName) {
    if (props[propName] && props[propName] instanceof Element === false) {
      return new Error("Invalid prop `".concat(propName, "` supplied to `").concat(componentName, "`. Expected a DOM node. You may also be interested in the getApplicationNode prop"));
    }
  },

  /**
   * Buttons or other HTML to be rendered in the "actions" bar
   * at the bottom of the dialog.
   */
  actions: _propTypes.default.node,

  /**
   * Additional classes to be added to the actions container.
   */
  actionsClassName: _propTypes.default.string,

  /**
   * Aria label for the close button
   */
  ariaCloseLabel: _propTypes.default.string,

  /**
   * The modal's body content
   */
  children: _propTypes.default.node.isRequired,

  /**
   * Additional classes to be added to the root dialog element.
   */
  className: _propTypes.default.string,

  /**
   * Size of the close button. See [Button component]({{root}}/components/button/#components.button.react)
   */
  closeButtonSize: _propTypes.default.oneOf(['small', 'big']),

  /**
   * Variation string to be applied to close button component. See [Button component]({{root}}/components/button/#components.button.react)
   */
  closeButtonVariation: _propTypes.default.string,

  /**
   * For internationalization purposes, the text for the "Close" button must be
   * passed in as a prop.
   */
  closeText: _propTypes.default.string,

  /**
   * Disable exiting the dialog when a user presses the Escape key.
   */
  escapeExitDisabled: _propTypes.default.bool,

  /**
   * Same as `applicationNode`, but a function that returns the node instead of
   * the node itself. The function will not be called until after the component
   * mounts, so it's safe to use browser globals and refer to DOM nodes within
   * it (e.g. `document.getElementById(..)`)
   */
  getApplicationNode: _propTypes.default.func,

  /**
   * Additional classes to be added to the header, which wraps the heading and
   * close button.
   */
  headerClassName: _propTypes.default.string,

  /**
   * The Dialog's heading, to be rendered in the header alongside the close button.
   */
  heading: _propTypes.default.node,

  /**
   * A method to handle the state change of exiting (or deactivating)
   * the modal. It will be invoked when the user presses Escape, or clicks outside
   * the dialog (if `underlayClickExits=true`).
   */
  onExit: _propTypes.default.func,
  size: _propTypes.default.oneOf(['narrow', 'wide', 'full']),

  /**
   * @hide-prop [Deprecated] This prop has been renamed to `heading`.
   */
  title: _propTypes.default.node,

  /**
   * Enable exiting the dialog when a user clicks the underlay.
   */
  underlayClickExits: _propTypes.default.bool
};
var _default = Dialog;
exports.default = _default;