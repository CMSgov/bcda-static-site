"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.DateField = exports.defaultDateFormatter = void 0;

var _FormLabel = _interopRequireDefault(require("../FormLabel/FormLabel"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _TextField = _interopRequireDefault(require("../TextField/TextField"));

var _classnames = _interopRequireDefault(require("classnames"));

var _lodash = _interopRequireDefault(require("lodash.uniqueid"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

// Prevents day/month greater than 2 digits and year greater than 4 digits
var standardLengthFormatter = function standardLengthFormatter(_ref) {
  var day = _ref.day,
      month = _ref.month,
      year = _ref.year;
  return {
    day: day.length > 2 ? day.substring(0, 2) : day,
    month: month.length > 2 ? month.substring(0, 2) : month,
    year: year.length > 4 ? year.substring(0, 4) : year
  };
};

var defaultDateFormatter = function defaultDateFormatter(dateObject) {
  var standardDate = standardLengthFormatter(dateObject);
  return standardDate;
};

exports.defaultDateFormatter = defaultDateFormatter;

var DateField = /*#__PURE__*/function (_React$PureComponent) {
  _inherits(DateField, _React$PureComponent);

  function DateField(props) {
    var _this;

    _classCallCheck(this, DateField);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(DateField).call(this, props));
    _this.handleBlur = _this.handleBlur.bind(_assertThisInitialized(_this));
    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(DateField, [{
    key: "labelId",
    value: function labelId() {
      if (!this._labelId) {
        // Cache the ID so we're not regenerating it on each method call
        this._labelId = (0, _lodash.default)('datefield_label_');
      }

      return this._labelId;
    }
  }, {
    key: "formatDate",
    value: function formatDate() {
      if (this.props.dateFormatter && this.monthInput && this.dayInput && this.yearInput) {
        var values = {
          month: this.monthInput.value,
          day: this.dayInput.value,
          year: this.yearInput.value
        };
        return this.props.dateFormatter(values);
      }
    }
  }, {
    key: "handleBlur",
    value: function handleBlur(evt) {
      if (this.props.onBlur) {
        this.props.onBlur(evt, this.formatDate());
      }

      if (this.props.onComponentBlur) {
        this.handleComponentBlur(evt);
      }
    }
  }, {
    key: "handleChange",
    value: function handleChange(evt) {
      this.props.onChange(evt, this.formatDate());
    }
  }, {
    key: "handleComponentBlur",
    value: function handleComponentBlur(evt) {
      var _this2 = this;

      // The active element is always the document body during a focus
      // transition, so in order to check if the newly focused element
      // is one of our other date inputs, we're going to have to wait
      // a bit.
      setTimeout(function () {
        if (document.activeElement !== _this2.dayInput && document.activeElement !== _this2.monthInput && document.activeElement !== _this2.yearInput) {
          _this2.props.onComponentBlur(evt, _this2.formatDate());
        }
      }, 20);
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var sharedDateFieldProps = {
        className: 'ds-l-col--auto',
        labelClassName: 'ds-u-font-weight--normal ds-u-margin-top--1',
        inversed: this.props.inversed,
        onBlur: (this.props.onBlur || this.props.onComponentBlur) && this.handleBlur,
        onChange: this.props.onChange && this.handleChange,
        numeric: true
      };
      var labelId = this.labelId();
      return _react.default.createElement("fieldset", {
        className: "ds-c-fieldset"
      }, _react.default.createElement(_FormLabel.default, {
        component: "legend",
        errorMessage: this.props.errorMessage,
        hint: this.props.hint,
        inversed: this.props.inversed,
        requirementLabel: this.props.requirementLabel,
        id: labelId
      }, this.props.label), _react.default.createElement("div", {
        className: "ds-l-form-row ds-u-align-items--end"
      }, _react.default.createElement(_TextField.default, _extends({}, sharedDateFieldProps, {
        fieldClassName: (0, _classnames.default)('ds-c-field--month', {
          'ds-c-field--error': this.props.monthInvalid
        }),
        inputRef: function inputRef(el) {
          _this3.monthInput = el;
          if (_this3.props.monthFieldRef) _this3.props.monthFieldRef(el);
        },
        defaultValue: this.props.monthDefaultValue,
        label: this.props.monthLabel,
        name: this.props.monthName,
        value: this.props.monthValue,
        "aria-describedby": labelId
      })), _react.default.createElement("span", {
        className: "ds-c-datefield__separator"
      }, "/"), _react.default.createElement(_TextField.default, _extends({}, sharedDateFieldProps, {
        fieldClassName: (0, _classnames.default)('ds-c-field--day', {
          'ds-c-field--error': this.props.dayInvalid
        }),
        inputRef: function inputRef(el) {
          _this3.dayInput = el;
          if (_this3.props.dayFieldRef) _this3.props.dayFieldRef(el);
        },
        defaultValue: this.props.dayDefaultValue,
        label: this.props.dayLabel,
        name: this.props.dayName,
        value: this.props.dayValue,
        "aria-describedby": labelId
      })), _react.default.createElement("span", {
        className: "ds-c-datefield__separator"
      }, "/"), _react.default.createElement(_TextField.default, _extends({}, sharedDateFieldProps, {
        fieldClassName: (0, _classnames.default)('ds-c-field--year', {
          'ds-c-field--error': this.props.yearInvalid
        }),
        inputRef: function inputRef(el) {
          _this3.yearInput = el;
          if (_this3.props.yearFieldRef) _this3.props.yearFieldRef(el);
        },
        defaultValue: this.props.yearDefaultValue,
        label: this.props.yearLabel,
        name: this.props.yearName,
        value: this.props.yearValue,
        "aria-describedby": labelId
      }))));
    }
  }]);

  return DateField;
}(_react.default.PureComponent);

exports.DateField = DateField;
DateField.defaultProps = {
  label: 'Date',
  hint: 'For example: 4 / 28 / 1986',
  dayLabel: 'Day',
  dayName: 'day',
  monthLabel: 'Month',
  monthName: 'month',
  yearLabel: 'Year',
  yearName: 'year',
  dateFormatter: defaultDateFormatter
};
DateField.propTypes = {
  /**
   * Optional method to format the `input` field values. If this
   * method is provided, the returned value will be passed as a second argument
   * to the `onBlur` and `onChange` callbacks. This method receives an object as
   * its only argument, in the shape of: `{ day, month, year }`
   *
   * By default `dateFormatter` will be set to the `defaultDateFormatter` function, which prevents days/months more than 2 digits & years more than 4 digits.
   */
  dateFormatter: _propTypes.default.func,
  errorMessage: _propTypes.default.node,

  /**
   * Additional hint text to display above the individual month/day/year fields
   */
  hint: _propTypes.default.node,

  /**
   * Applies the "inverse" UI theme
   */
  inversed: _propTypes.default.bool,

  /**
   * The primary label, rendered above the individual month/day/year fields
   */
  label: _propTypes.default.node,

  /**
   * Text showing the requirement ("Required", "Optional", etc.). See [Required and Optional Fields]({{root}}/guidelines/forms/#required-and-optional-fields).
   */
  requirementLabel: _propTypes.default.node,

  /**
   * Called anytime any date input is blurred
   */
  onBlur: _propTypes.default.func,

  /**
   * Called when any date input is blurred and the focus does not land on one
   * of the other date inputs inside this component (i.e., when the whole
   * component loses focus)
   */
  onComponentBlur: _propTypes.default.func,

  /**
   * Called anytime any date input is changed
   */
  onChange: _propTypes.default.func,

  /**
   * Label for the day field
   */
  dayLabel: _propTypes.default.node,

  /**
   * `name` for the day `input` field
   */
  dayName: _propTypes.default.string,

  /**
   * Initial value for the day `input` field. Use this for an uncontrolled
   * component; otherwise, use the `dayValue` property.
   */
  dayDefaultValue: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),

  /**
   * Access a reference to the day `input`
   */
  dayFieldRef: _propTypes.default.func,

  /**
   * Apply error styling to the day `input`
   */
  dayInvalid: _propTypes.default.bool,

  /**
   * Sets the day input's `value`. Use this in combination with `onChange`
   * for a controlled component; otherwise, set `dayDefaultValue`.
   */
  dayValue: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),

  /**
   * Label for the month field
   */
  monthLabel: _propTypes.default.node,

  /**
   * `name` for the month `input` field
   */
  monthName: _propTypes.default.string,

  /**
   * Initial value for the month `input` field. Use this for an uncontrolled
   * component; otherwise, use the `monthValue` property.
   */
  monthDefaultValue: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),

  /**
   * Access a reference to the month `input`
   */
  monthFieldRef: _propTypes.default.func,

  /**
   * Apply error styling to the month `input`
   */
  monthInvalid: _propTypes.default.bool,

  /**
   * Sets the month input's `value`. Use this in combination with `onChange`
   * for a controlled component; otherwise, set `monthDefaultValue`.
   */
  monthValue: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),

  /**
   * Initial value for the year `input` field. Use this for an uncontrolled
   * component; otherwise, use the `yearValue` property.
   */
  yearDefaultValue: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),

  /**
   * Access a reference to the year `input`
   */
  yearFieldRef: _propTypes.default.func,

  /**
   * Apply error styling to the year `input`
   */
  yearInvalid: _propTypes.default.bool,

  /**
   * Label for the year `input` field
   */
  yearLabel: _propTypes.default.node,

  /**
   * `name` for the year field
   */
  yearName: _propTypes.default.string,

  /**
   * Sets the year input's `value`. Use this in combination with `onChange`
   * for a controlled component; otherwise, set `yearDefaultValue`.
   */
  yearValue: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])
};
var _default = DateField;
exports.default = _default;