"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.HelpDrawer = void 0;

var _Button = _interopRequireDefault(require("../Button/Button"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var HelpDrawer = /*#__PURE__*/function (_React$PureComponent) {
  _inherits(HelpDrawer, _React$PureComponent);

  function HelpDrawer(props) {
    var _this;

    _classCallCheck(this, HelpDrawer);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(HelpDrawer).call(this, props));
    _this.headingRef = null;

    if (process.env.NODE_ENV !== 'production') {
      if (props.title) {
        console.warn("[Deprecated]: Please remove the 'title' prop in <Button>, use 'heading' instead. This prop has been renamed and will be removed in a future release.");
      }

      if (!props.title && !props.heading) {
        console.warn("The 'heading' prop in <Button>, use 'heading' instead. This prop has been renamed and will be removed in a future release.");
      }
    }

    return _this;
  }

  _createClass(HelpDrawer, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.headingRef) this.headingRef.focus();
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          ariaLabel = _this$props.ariaLabel,
          closeButtonText = _this$props.closeButtonText,
          title = _this$props.title,
          children = _this$props.children,
          onCloseClick = _this$props.onCloseClick,
          heading = _this$props.heading,
          footerBody = _this$props.footerBody,
          footerTitle = _this$props.footerTitle;
      var Heading = "h".concat(this.props.headingLevel) || "h3";
      /* eslint-disable jsx-a11y/no-noninteractive-tabindex, react/no-danger */

      return _react.default.createElement("div", {
        className: "ds-c-help-drawer"
      }, _react.default.createElement("div", {
        className: "ds-c-help-drawer__header"
      }, _react.default.createElement("div", {
        className: "ds-u-fill--gray-lightest ds-u-padding--2 ds-u-display--flex ds-u-align-items--start"
      }, _react.default.createElement(Heading, {
        ref: function ref(el) {
          return _this2.headingRef = el;
        },
        tabIndex: "0",
        className: "ds-u-text--lead ds-u-margin-y--0 ds-u-margin-right--2"
      }, // TODO: make heading required after removing title
      title || heading), _react.default.createElement(_Button.default, {
        "aria-label": ariaLabel,
        className: "ds-u-margin-left--auto ds-c-help-drawer__close-button",
        size: "small",
        onClick: onCloseClick
      }, closeButtonText))), _react.default.createElement("div", {
        className: "ds-c-help-drawer__body"
      }, _react.default.createElement("div", {
        className: "ds-c-help-drawer__content ds-u-md-font-size--small ds-u-lg-font-size--base ds-u-padding--2"
      }, children), _react.default.createElement("div", {
        className: "ds-c-help-drawer__footer ds-u-fill--primary-alt-lightest ds-u-md-font-size--small ds-u-lg-font-size--base ds-u-padding--2"
      }, _react.default.createElement("h4", {
        className: "ds-text ds-u-margin--0"
      }, footerTitle), _react.default.createElement("div", {
        className: "ds-text ds-u-margin--0"
      }, footerBody))));
    }
  }]);

  return HelpDrawer;
}(_react.default.PureComponent);

exports.HelpDrawer = HelpDrawer;
HelpDrawer.defaultProps = {
  ariaLabel: 'Close help drawer',
  closeButtonText: 'Close',
  headingLevel: '3'
};
HelpDrawer.propTypes = {
  /**
   * Helps give more context to screen readers on the button that closes the Help Drawer
   */
  ariaLabel: _propTypes.default.string,
  closeButtonText: _propTypes.default.string,
  children: _propTypes.default.node.isRequired,
  footerBody: _propTypes.default.node,
  footerTitle: _propTypes.default.string,

  /**
   * Text for the HelpDrawer title. Required because the `heading` will be focused on mount.
   */
  heading: _propTypes.default.string,

  /**
   * Heading type to override default `<h3>`
   */
  headingLevel: _propTypes.default.oneOf(['1', '2', '3', '4', '5']),
  onCloseClick: _propTypes.default.func.isRequired,

  /**
   * @hide-prop [Deprecated] This prop has been renamed to `heading`.
   */
  title: _propTypes.default.string
};
var _default = HelpDrawer;
exports.default = _default;