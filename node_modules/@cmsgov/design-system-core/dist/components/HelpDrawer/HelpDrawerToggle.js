"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.HelpDrawerToggle = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

/**
 * A link that triggers the visibility of a help drawer
 */
var HelpDrawerToggle = /*#__PURE__*/function (_React$PureComponent) {
  _inherits(HelpDrawerToggle, _React$PureComponent);

  function HelpDrawerToggle() {
    _classCallCheck(this, HelpDrawerToggle);

    return _possibleConstructorReturn(this, _getPrototypeOf(HelpDrawerToggle).apply(this, arguments));
  }

  _createClass(HelpDrawerToggle, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (!this.props.helpDrawerOpen && prevProps.helpDrawerOpen) {
        this.buttonRef.focus();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this = this;

      var blockInlineClass = "ds-u-display--".concat(this.props.inline ? 'inline-block' : 'block');
      /* eslint-disable jsx-a11y/anchor-is-valid */

      return (// Use a <span> since a <div> may be invalid depending where this link is nested
        _react.default.createElement("span", {
          className: blockInlineClass
        }, _react.default.createElement("a", {
          href: "javascript:void(0);",
          className: this.props.className,
          ref: function ref(el) {
            return _this.buttonRef = el;
          },
          onClick: function onClick() {
            return _this.props.showDrawer();
          }
        }, this.props.children))
      );
    }
  }]);

  return HelpDrawerToggle;
}(_react.default.PureComponent);
/* eslint-disable react/no-unused-prop-types */


exports.HelpDrawerToggle = HelpDrawerToggle;
HelpDrawerToggle.propTypes = {
  /** Whether or not the Help Drawer controlled by this toggle is open or closed. This value is used to re-focus the toggle that opened the drawer when the drawer closes. */
  helpDrawerOpen: _propTypes.default.bool.isRequired,
  children: _propTypes.default.node.isRequired,

  /** Additional classes for the toggle button anchor element */
  className: _propTypes.default.string,

  /** Add display inline or block to parent span */
  inline: _propTypes.default.bool,

  /** This function is called with an id that the toggle generates. It can
   be used in implementing the help drawer for keeping track of the drawer the toggle controls */
  showDrawer: _propTypes.default.func.isRequired
};
var _default = HelpDrawerToggle;
exports.default = _default;