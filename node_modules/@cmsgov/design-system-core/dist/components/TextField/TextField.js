"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "unmaskValue", {
  enumerable: true,
  get: function get() {
    return _Mask.unmaskValue;
  }
});
exports.default = exports.TextField = void 0;

var _FormLabel = _interopRequireDefault(require("../FormLabel/FormLabel"));

var _Mask = _interopRequireWildcard(require("./Mask"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _lodash = _interopRequireDefault(require("lodash.uniqueid"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var TextField = /*#__PURE__*/function (_React$PureComponent) {
  _inherits(TextField, _React$PureComponent);

  function TextField(props) {
    var _this;

    _classCallCheck(this, TextField);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(TextField).call(this, props));
    _this.id = props.id || (0, _lodash.default)('textfield_');
    _this.labelId = props.labelId || (0, _lodash.default)('textfield_label_');

    if (process.env.NODE_ENV !== 'production') {
      if (props.fieldRef) {
        console.warn("[Deprecated]: Please remove the 'fieldRef' prop in <TextField>, use 'inputRef' instead. This prop has been renamed and will be removed in a future release.");
      }

      if (props.type === 'number') {
        console.warn("Please use the 'numeric' prop instead of 'type=\"number\"' unless your user research suggests otherwise.");
      }
    }

    return _this;
  }

  _createClass(TextField, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.focusTrigger) {
        this.focusRef && this.focusRef.focus();
      }
    }
  }, {
    key: "ariaLabel",
    value: function ariaLabel() {
      if (this.props.ariaLabel) {
        return this.props.ariaLabel;
      } else if (this.props.mask === 'currency') {
        return "".concat(this.props.label, ". Enter amount in dollars.");
      }
    }
    /**
     * @param {React.Component} field
     * @returns {React.Component} The input field, optionally including mask
     *  markup if a mask is present
     */

  }, {
    key: "renderFieldAndMask",
    value: function renderFieldAndMask(field) {
      return this.props.mask ? _react.default.createElement(_Mask.default, {
        mask: this.props.mask
      }, field) : field;
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          ariaLabel = _this$props.ariaLabel,
          className = _this$props.className,
          errorMessage = _this$props.errorMessage,
          fieldClassName = _this$props.fieldClassName,
          fieldRef = _this$props.fieldRef,
          focusTrigger = _this$props.focusTrigger,
          hint = _this$props.hint,
          id = _this$props.id,
          inversed = _this$props.inversed,
          inputRef = _this$props.inputRef,
          label = _this$props.label,
          labelClassName = _this$props.labelClassName,
          labelId = _this$props.labelId,
          mask = _this$props.mask,
          multiline = _this$props.multiline,
          numeric = _this$props.numeric,
          requirementLabel = _this$props.requirementLabel,
          rows = _this$props.rows,
          size = _this$props.size,
          type = _this$props.type,
          pattern = _this$props.pattern,
          fieldProps = _objectWithoutProperties(_this$props, ["ariaLabel", "className", "errorMessage", "fieldClassName", "fieldRef", "focusTrigger", "hint", "id", "inversed", "inputRef", "label", "labelClassName", "labelId", "mask", "multiline", "numeric", "requirementLabel", "rows", "size", "type", "pattern"]);

      var FieldComponent = multiline ? 'textarea' : 'input';

      var _rows = multiline && rows ? rows : undefined;

      var classes = (0, _classnames.default)('ds-u-clearfix', // fixes issue where the label's margin is collapsed
      className);
      var fieldClasses = (0, _classnames.default)('ds-c-field', mask && "ds-c-field--".concat(mask), {
        'ds-c-field--error': typeof errorMessage === 'string',
        'ds-c-field--inverse': inversed
      }, fieldClassName, size && "ds-c-field--".concat(size));
      var inputType = type;

      if (numeric) {
        inputType = 'text';
      } else if (multiline) {
        inputType = undefined;
      }

      var field = _react.default.createElement(FieldComponent, _extends({
        "aria-label": this.ariaLabel(),
        className: fieldClasses,
        id: this.id
        /* eslint-disable no-return-assign */
        ,
        ref: function ref(_ref) {
          if (focusTrigger) {
            _this2.focusRef = _ref;
          } else {
            if (inputRef) {
              inputRef(_ref);
            }

            if (fieldRef) {
              fieldRef(_ref);
            }
          }
        }
        /* eslint-enable no-return-assign */
        ,
        rows: _rows,
        inputMode: numeric ? 'numeric' : undefined,
        pattern: numeric && !pattern ? '[0-9]*' : pattern,
        type: inputType
      }, fieldProps));

      return _react.default.createElement("div", {
        className: classes
      }, _react.default.createElement(_FormLabel.default, {
        className: labelClassName,
        errorMessage: errorMessage,
        fieldId: this.id,
        hint: hint,
        id: this.labelId,
        requirementLabel: requirementLabel,
        inversed: inversed
      }, label), this.renderFieldAndMask(field, mask));
    }
  }]);

  return TextField;
}(_react.default.PureComponent);

exports.TextField = TextField;
TextField.defaultProps = {
  type: 'text'
};
TextField.propTypes = {
  /**
   * Apply an `aria-label` to the text field to provide additional
   * context to assistive devices.
   */
  ariaLabel: _propTypes.default.string,

  /**
   * Additional classes to be added to the root `div` element
   */
  className: _propTypes.default.string,

  /**
   * Sets the initial value. Use this for an uncontrolled component; otherwise,
   * use the `value` property.
   */
  defaultValue: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  disabled: _propTypes.default.bool,
  errorMessage: _propTypes.default.node,

  /**
   * Additional classes to be added to the field element
   */
  fieldClassName: _propTypes.default.string,

  /**
   * @hide-prop [Deprecated] Access a reference to the `input` or `textarea` element. Please use `inputRef` instead.
   */
  fieldRef: _propTypes.default.func,

  /**
   * Used to focus `input` on `componentDidMount()`
   */
  focusTrigger: _propTypes.default.bool,

  /**
   * Additional hint text to display
   */
  hint: _propTypes.default.node,

  /**
   * A unique `id` to be used on the text field.
   */
  id: _propTypes.default.string,

  /**
   * Access a reference to the `input` or `textarea` element
   */
  inputRef: _propTypes.default.func,

  /**
   * Text showing the requirement ("Required", "Optional", etc.). See [Required and Optional Fields]({{root}}/guidelines/forms/#required-and-optional-fields).
   */
  requirementLabel: _propTypes.default.node,

  /**
   * Applies the "inverse" UI theme
   */
  inversed: _propTypes.default.bool,

  /**
   * Label for the input
   */
  label: _propTypes.default.node.isRequired,

  /**
   * Additional classes to be added to the `FormLabel`.
   */
  labelClassName: _propTypes.default.string,

  /**
   * A unique `id` to be used on the label field.
   */
  labelId: _propTypes.default.string,

  /**
   * Apply formatting to the field that's unique to the value
   * you expect to be entered. Depending on the mask, the
   * field's appearance and functionality may be affected.
   */
  mask: _propTypes.default.oneOf(['currency', 'phone', 'ssn', 'zip']),

  /**
   * Whether or not the text field is a multiline text field
   */
  multiline: _propTypes.default.bool,
  name: _propTypes.default.string.isRequired,

  /**
   * Sets `inputMode`, `type`, and `pattern` to improve accessiblity and consistency for number fields. Use this prop instead of `type="number"`, see [here](https://technology.blog.gov.uk/2020/02/24/why-the-gov-uk-design-system-team-changed-the-input-type-for-numbers/) for more information.
   */
  numeric: _propTypes.default.bool,
  onBlur: _propTypes.default.func,
  onChange: _propTypes.default.func,

  /**
   * @hide-prop HTML `input` [pattern](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefpattern).
   */
  pattern: _propTypes.default.string,

  /**
   * Optionally specify the number of visible text lines for the field. Only
   * applicable if this is a multiline field.
   */
  rows: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),

  /**
   * Set the max-width of the input either to `'small'` or `'medium'`.
   */
  size: _propTypes.default.oneOf(['small', 'medium']),

  /**
   * HTML `input` [type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#<input>_types) attribute. If you are using `type=number` please use the numeric prop instead.
   */
  type: _propTypes.default.string,

  /**
   * Sets the input's `value`. Use this in combination with `onChange`
   * for a controlled component; otherwise, set `defaultValue`.
   */
  value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])
};
var _default = TextField;
exports.default = _default;