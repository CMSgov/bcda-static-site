"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.maskValue = maskValue;
exports.unmaskValue = unmaskValue;
exports.default = exports.Mask = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

// Deliminate chunks of integers
var maskDeliminatedRegex = {
  phone: /(\d{3})(\d{1,3})?(\d+)?/,
  ssn: /([*\d]{3})([*\d]{1,2})?([*\d]+)?/,
  zip: /(\d{5})(\d*)/
};
var maskPattern = {
  phone: '[0-9-]*',
  ssn: '[0-9-*]*',
  zip: '[0-9-]*',
  currency: '[0-9.-]*'
};
var maskOverlayContent = {
  currency: '$'
};
/**
 * Split value into groups and insert a hyphen deliminator between each
 * @param {String} value
 * @param {RegExp} rx - Regular expression with capturing groups
 * @returns {String}
 */

function deliminateRegexGroups(value, rx) {
  var matches = toDigitsAndAsterisks(value).match(rx);

  if (matches && matches.length > 1) {
    value = matches.slice(1).filter(function (a) {
      return !!a;
    }) // remove undefined groups
    .join('-');
  }

  return value;
}
/**
 * Format a string using fixed-point notation, similar to Number.prototype.toFixed
 * though a decimal is only fixed if the string included a decimal already
 * @param {String} value - A stringified number (i.e. "1234")
 * @param {Number} digits - The number of digits to appear after the decimal point
 * @returns {String}
 */


function stringWithFixedDigits(value) {
  var digits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
  var decimalRegex = /\.[\d]+$/; // Check for existing decimal

  var decimal = value.match(decimalRegex);

  if (decimal) {
    var fixedDecimal = parseFloat(decimal).toFixed(digits).match(decimalRegex)[0];
    return value.replace(decimal, fixedDecimal);
  }

  return value;
}
/**
 * Remove everything that isn't a digit or asterisk
 * @param {String} value
 * @returns {String}
 */


function toDigitsAndAsterisks(value) {
  return value.replace(/[^\d*]/g, '');
}
/**
 * Remove all non-digits
 * @param {String} value
 * @returns {String}
 */


function toDigits(value) {
  return value.replace(/[^\d]/g, '');
}
/**
 * Convert string into a number (positive or negative float or integer)
 * @param {String} value
 * @returns {Number}
 */


function toNumber(value) {
  var sign = value.charAt(0) === '-' ? -1 : 1;
  var parts = value.split('.'); // This assumes if the user adds a "." it should be a float. If we want it to
  // evaluate as an integer if there are no digits beyond the decimal, then we
  // can change it.

  var hasDecimal = parts[1] !== undefined;

  if (hasDecimal) {
    var a = toDigits(parts[0]);
    var b = toDigits(parts[1]);
    return sign * parseFloat("".concat(a, ".").concat(b));
  } else {
    return sign * parseInt(toDigits(parts[0]));
  }
}
/**
 * Determines if a value is a valid string with numeric digits
 * @param {String} value
 * @param {String} mask
 * @returns {Boolean}
 */


function isValueMaskable(value, mask) {
  if (value && typeof value === 'string') {
    var hasDigits = value.match(/\d/);
    var hasDigitsAsterisks = value.match(/[\d*]/g);

    if (hasDigits || hasDigitsAsterisks && mask === 'ssn') {
      return true;
    }
  }

  return false;
}
/**
 * Returns the value with additional masking characters, or the same value back if invalid numeric string
 * @param {String} value
 * @returns {String}
 */


function maskValue() {
  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var mask = arguments.length > 1 ? arguments[1] : undefined;

  if (isValueMaskable(value, mask)) {
    if (mask === 'currency') {
      // Format number with commas. If the number includes a decimal,
      // ensure it includes two decimal points
      var number = toNumber(value);

      if (number !== undefined) {
        value = stringWithFixedDigits(number.toLocaleString('en-US'));
      }
    } else if (maskDeliminatedRegex[mask]) {
      // Use deliminator regex to mask value and remove unwanted characters
      // If the regex does not match, return the numeric digits.
      value = deliminateRegexGroups(value, maskDeliminatedRegex[mask]);
    }
  }

  return value;
}

var Mask = /*#__PURE__*/function (_React$PureComponent) {
  _inherits(Mask, _React$PureComponent);

  function Mask(props) {
    var _this;

    _classCallCheck(this, Mask);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Mask).call(this, props));

    var field = _this.field();

    var initialValue = field.props.value || field.props.defaultValue;
    _this.state = {
      value: maskValue(initialValue, props.mask)
    };
    return _this;
  }

  _createClass(Mask, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.debouncedOnBlurEvent) {
        this.field().props.onBlur(this.debouncedOnBlurEvent);
        this.debouncedOnBlurEvent = null;
      }

      var fieldProps = this.field().props;

      var prevFieldProps = _react.default.Children.only(prevProps.children).props;

      var isControlled = fieldProps.value !== undefined;

      if (isControlled && prevFieldProps.value !== fieldProps.value) {
        var mask = this.props.mask; // For controlled components, the value prop should ideally be changed by
        // the controlling component once we've called onChange with our updates.
        // If the change was triggered this way through user input, then the prop
        // given should match our internal state when unmasked. If what we're
        // given and what we have locally don't match, that means the controlling
        // component has made its own unrelated change, so we should update our
        // state and mask this new value.

        if (unmaskValue(fieldProps.value, mask) !== unmaskValue(this.state.value, mask)) {
          var value = maskValue(fieldProps.value || '', mask);
          this.setState({
            value: value
          }); // eslint-disable-line react/no-did-update-set-state
        }
      }
    }
    /**
     * Get the child text field. Called as a method so that
     * updates to the field cause the mask to re-render
     * @returns {React.ReactElement} Child TextField
     */

  }, {
    key: "field",
    value: function field() {
      return _react.default.Children.only(this.props.children);
    }
    /**
     * To avoid a jarring experience for screen readers, we only
     * add/remove characters after the field has been blurred,
     * rather than when the user is typing in the field
     * @param {Object} evt
     * @param {React.Element} field - Child TextField
     */

  }, {
    key: "handleBlur",
    value: function handleBlur(evt, field) {
      var value = maskValue(evt.target.value, this.props.mask); // We only debounce the onBlur when we know for sure that
      // this component will re-render (AKA when the value changes)
      // and when an onBlur callback is present

      var debounce = value !== this.state.value && typeof field.props.onBlur === 'function';

      if (debounce) {
        // We need to retain a reference to the event after the callback
        // has been called. We pass this onto the consuming app's onBlur
        // only after the value has been manipulated â€“ this way, the
        // value returned by event.target.value is the value after masking
        evt.persist();
        this.debouncedOnBlurEvent = evt;
      }

      this.setState({
        value: value
      });

      if (!debounce && typeof field.props.onBlur === 'function') {
        // If we didn't debounce the onBlur event, then we need to
        // call the onBlur callback from here
        field.props.onBlur(evt);
      }
    }
    /**
     * @param {Object} evt
     * @param {React.Element} field - Child TextField
     */

  }, {
    key: "handleChange",
    value: function handleChange(evt, field) {
      this.setState({
        value: evt.target.value
      });

      if (typeof field.props.onChange === 'function') {
        field.props.onChange(evt);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var mask = this.props.mask;
      var field = this.field();

      var modifiedTextField = _react.default.cloneElement(field, {
        defaultValue: undefined,
        onBlur: function onBlur(evt) {
          return _this2.handleBlur(evt, field);
        },
        onChange: function onChange(evt) {
          return _this2.handleChange(evt, field);
        },
        value: this.state.value,
        type: 'text',
        inputMode: 'numeric',
        pattern: maskPattern[this.props.mask]
      }); // UI overlayed on top of a field to support certain masks


      var maskOverlay = maskOverlayContent[mask] ? _react.default.createElement("div", {
        className: "ds-c-field__before ds-c-field__before--".concat(mask)
      }, maskOverlayContent[mask]) : null;
      return _react.default.createElement("div", {
        className: "ds-c-field-mask ds-c-field-mask--".concat(mask)
      }, maskOverlay, modifiedTextField);
    }
  }]);

  return Mask;
}(_react.default.PureComponent);

exports.Mask = Mask;
Mask.propTypes = {
  /**
   * Must contain a `TextField` component
   */
  children: _propTypes.default.node.isRequired,
  mask: _propTypes.default.oneOf(['currency', 'phone', 'ssn', 'zip'])
};
/**
 * Remove mask characters from value, or the same value back if invalid numeric string
 * @param {String} value
 * @param {String} mask
 * @returns {String}
 */

function unmaskValue(value, mask) {
  if (isValueMaskable(value, mask)) {
    if (mask === 'currency') {
      // Preserve only digits, decimal point, or negative symbol
      var matches = value.match(/^-|[\d.]/g);

      if (matches) {
        value = matches.join('');
      }
    } else if (maskDeliminatedRegex[mask]) {
      // Remove the deliminators and revert to single ungrouped string
      value = toDigitsAndAsterisks(value);
    }
  }

  return value;
}

var _default = Mask;
exports.default = _default;