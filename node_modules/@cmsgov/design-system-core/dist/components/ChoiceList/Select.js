"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Select = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _lodash = _interopRequireDefault(require("lodash.uniqueid"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Select = /*#__PURE__*/function (_React$PureComponent) {
  _inherits(Select, _React$PureComponent);

  function Select() {
    _classCallCheck(this, Select);

    return _possibleConstructorReturn(this, _getPrototypeOf(Select).apply(this, arguments));
  }

  _createClass(Select, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.focusTrigger) {
        this.loader && this.loader.focus();
      }

      if (process.env.NODE_ENV !== 'production') {
        console.warn("[Deprecated] The <Select> component is no longer supported and will be removed in a future release, please use <Dropdown> instead.");
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this = this;

      /* eslint-disable prefer-const */
      var _this$props = this.props,
          children = _this$props.children,
          className = _this$props.className,
          focusTrigger = _this$props.focusTrigger,
          id = _this$props.id,
          inversed = _this$props.inversed,
          selectRef = _this$props.selectRef,
          size = _this$props.size,
          selectProps = _objectWithoutProperties(_this$props, ["children", "className", "focusTrigger", "id", "inversed", "selectRef", "size"]);
      /* eslint-enable prefer-const */


      var classes = (0, _classnames.default)('ds-c-field', {
        'ds-c-field--inverse': inversed
      }, className, size && "ds-c-field--".concat(size));

      if (!id) {
        id = (0, _lodash.default)("select_".concat(selectProps.name, "_"));
      }

      return _react.default.createElement("select", _extends({
        className: classes,
        id: id
        /* eslint-disable no-return-assign */
        ,
        ref: focusTrigger ? function (loader) {
          return _this.loader = loader;
        } : selectRef
        /* eslint-enable no-return-assign */

      }, selectProps), children);
    }
  }]);

  return Select;
}(_react.default.PureComponent);

exports.Select = Select;
Select.propTypes = {
  children: _propTypes.default.node.isRequired,

  /**
   * Additional classes to be added to the root `select` element.
   */
  className: _propTypes.default.string,

  /**
   * Sets the initial selected state. Use this for an uncontrolled component;
   * otherwise, use the `selected` property.
   */
  defaultValue: _propTypes.default.string,
  disabled: _propTypes.default.bool,

  /**
   * Used to focus `select` on `componentDidMount()`
   */
  focusTrigger: _propTypes.default.bool,

  /**
   * A unique ID to be used for the select field. A unique ID will be generated
   * if one isn't provided.
   */
  id: _propTypes.default.string,

  /**
   * Applies the "inverse" UI theme
   */
  inversed: _propTypes.default.bool,

  /**
   * Setting this prop will result in a PropTypes error message due to
   * accessibility concerns. Use checkboxes instead if you need to support multiple
   * selections. See the Guidance tab for more info.
   */
  multiple: function multiple(props, propName, componentName) {
    if (props[propName]) {
      /* eslint-disable quotes */
      return new Error("'".concat(propName, "' supplied to '").concat(componentName, "'. [A11Y]: Users often don\u2019t") + " understand how to select multiple items from dropdowns. Use checkboxes instead.");
      /* eslint-enable */
    }
  },

  /**
   * The `select` field's `name` attribute
   */
  name: _propTypes.default.string.isRequired,
  onBlur: _propTypes.default.func,
  onChange: _propTypes.default.func,

  /**
   * Access a reference to the `select` element
   */
  selectRef: _propTypes.default.func,

  /**
   * Set the max-width of the input either to `'small'` or `'medium'`.
   */
  size: _propTypes.default.oneOf(['small', 'medium']),

  /**
   * Sets the field's `value`. Use this in combination with `onChange`
   * for a controlled component; otherwise, set `defaultValue`.
   */
  value: _propTypes.default.string,

  /**
   * Adds `aria-label` attribute
   */
  'aria-label': _propTypes.default.string
};
var _default = Select;
exports.default = _default;