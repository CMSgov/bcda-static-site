"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ChoiceList = void 0;

var _Choice = _interopRequireDefault(require("./Choice"));

var _FormLabel = _interopRequireDefault(require("../FormLabel/FormLabel"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _Select = _interopRequireDefault(require("./Select"));

var _classnames = _interopRequireDefault(require("classnames"));

var _lodash = _interopRequireDefault(require("lodash.uniqueid"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var ChoiceList = /*#__PURE__*/function (_React$PureComponent) {
  _inherits(ChoiceList, _React$PureComponent);

  function ChoiceList(props) {
    var _this;

    _classCallCheck(this, ChoiceList);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ChoiceList).call(this, props));
    _this.handleBlur = _this.handleBlur.bind(_assertThisInitialized(_this));
    _this.choiceRefs = [];
    return _this;
  }
  /**
   * Creates the field component(s) based on the type of field we've determined
   * it should be.
   */


  _createClass(ChoiceList, [{
    key: "field",
    value: function field() {
      var _this2 = this;

      var type = this.type();
      var ChoiceComponent = type === 'select' ? 'option' : _Choice.default;
      var selectProps = {};
      var choices = this.props.choices.map(function (choice) {
        var checked = choice.checked,
            defaultChecked = choice.defaultChecked,
            label = choice.label,
            props = _objectWithoutProperties(choice, ["checked", "defaultChecked", "label"]);

        if (type === 'select') {
          if (checked) selectProps.value = props.value;
          if (defaultChecked) selectProps.defaultValue = props.value;
        } else {
          props.checked = checked;
          props.defaultChecked = defaultChecked; // Individual choices can be disabled as well as the entire list.
          // We only need to check for both options on checkbox/radio fields,
          // since the <Select> component handles the case where the entire list
          // is disabled.

          props.disabled = props.disabled || _this2.props.disabled;
          props.inversed = _this2.props.inversed;
          props.name = _this2.props.name;
          props.onBlur = (_this2.props.onBlur || _this2.props.onComponentBlur) && _this2.handleBlur;
          props.onChange = _this2.props.onChange;
          props.type = type;

          props.inputRef = function (ref) {
            _this2.choiceRefs.push(ref);
          };

          props.size = _this2.props.size;
        }

        return _react.default.createElement(ChoiceComponent, _extends({
          key: choice.value
        }, props), label);
      });

      if (type === 'select') {
        return this.select(selectProps, choices);
      }

      return choices;
    }
    /**
     * If this is a <select> element, then we need to generate the ID here
     * so it can be shared between the FormLabel and Select component
     */

  }, {
    key: "id",
    value: function id() {
      // ID will be generated by the Choice component
      if (this.type() !== 'select') return;

      if (!this._id) {
        // Cache the ID so we're not regenerating it on each method call
        this._id = (0, _lodash.default)("select_".concat(this.props.name, "_"));
      }

      return this._id;
    }
    /**
     * @param {object} selectProps
     * @param {array} options - <option> components
     */

  }, {
    key: "select",
    value: function select(selectProps, options) {
      var classes = this.props.size && "ds-c-field--".concat(this.props.size);
      return _react.default.createElement(_Select.default, _extends({
        disabled: this.props.disabled,
        id: this.id(),
        inversed: this.props.inversed,
        name: this.props.name,
        onBlur: this.props.onBlur,
        onChange: this.props.onChange,
        className: classes,
        "aria-label": this.props.ariaLabel
      }, selectProps), options);
    }
    /**
     * Determines the type of field(s) we should render based on a few factors
     */

  }, {
    key: "type",
    value: function type() {
      if (this.props.type) {
        return this.props.type;
      }

      if (this.props.multiple || this.props.choices.length === 1) {
        // Prefer a checkbox when multiple choices can be selected, since users
        // have trouble selecting multiple choices from a select menu. And if only
        // one choice is available, then a radio button would prevent a user from
        // deselecting the field.
        return 'checkbox';
      } else if (this.props.choices.length > 7) {
        // Prefer a select menu when the list has "many" choices.
        // TODO(sawyer): More research needed to determine what's considered "many"
        return 'select';
      }

      return 'radio';
    }
  }, {
    key: "handleBlur",
    value: function handleBlur(evt) {
      if (this.props.onBlur) {
        this.props.onBlur(evt);
      }

      if (this.props.onComponentBlur) {
        this.handleComponentBlur(evt);
      }
    }
  }, {
    key: "handleComponentBlur",
    value: function handleComponentBlur(evt) {
      var _this3 = this;

      // The active element is always the document body during a focus
      // transition, so in order to check if the newly focused element
      // is one of our choices, we're going to have to wait a bit.
      setTimeout(function () {
        if (!_this3.choiceRefs.includes(document.activeElement)) {
          _this3.props.onComponentBlur(evt);
        }
      }, 20);
    }
  }, {
    key: "render",
    value: function render() {
      var type = this.type();
      var classes = (0, _classnames.default)({
        'ds-c-fieldset': type !== 'select'
      }, this.props.className);
      var RootComponent = type === 'select' ? 'div' : 'fieldset';
      var FormLabelComponent = type === 'select' ? 'label' : 'legend';
      return _react.default.createElement(RootComponent, {
        className: classes || null
      }, _react.default.createElement(_FormLabel.default, {
        className: this.props.labelClassName,
        component: FormLabelComponent,
        errorMessage: this.props.errorMessage,
        fieldId: this.id(),
        hint: this.props.hint,
        requirementLabel: this.props.requirementLabel,
        inversed: this.props.inversed
      }, this.props.label), this.field());
    }
  }]);

  return ChoiceList;
}(_react.default.PureComponent);

exports.ChoiceList = ChoiceList;
ChoiceList.propTypes = {
  /**
   * The list of choices to be rendered. The number of choices you pass in may
   * affect the type of field(s) rendered. See `type` for more info.
   */
  choices: _propTypes.default.arrayOf(_propTypes.default.shape({
    checked: _Choice.default.propTypes.checked,
    defaultChecked: _Choice.default.propTypes.defaultChecked,
    disabled: _Choice.default.propTypes.disabled,
    hint: _Choice.default.propTypes.hint,
    label: _Choice.default.propTypes.children,
    requirementLabel: _Choice.default.propTypes.requirementLabel,
    value: _Choice.default.propTypes.value
  })).isRequired,

  /**
   * Additional classes to be added to the root element.
   */
  className: _propTypes.default.string,

  /**
   * Disables the entire field.
   */
  disabled: _propTypes.default.bool,
  errorMessage: _propTypes.default.node,

  /**
   * Additional hint text to display
   */
  hint: _propTypes.default.node,

  /**
   * Text showing the requirement ("Required", "Optional", etc.). See [Required and Optional Fields]({{root}}/guidelines/forms/#required-and-optional-fields).
   */
  requirementLabel: _propTypes.default.node,

  /**
   * Applies the "inverse" UI theme
   */
  inversed: _propTypes.default.bool,

  /**
   * Label for the field
   */
  label: _propTypes.default.node.isRequired,

  /**
   * Additional classes to be added to the `FormLabel`.
   */
  labelClassName: _propTypes.default.string,

  /**
   * Allows the user to select multiple choices. Setting this to `true` results
   * in a list of checkbox fields to be rendered.
   */
  multiple: _propTypes.default.bool,

  /**
   * The field's `name` attribute
   */
  name: _propTypes.default.string.isRequired,

  /**
   * Called anytime any choice is blurred
   */
  onBlur: _propTypes.default.func,

  /**
   * Called when any choice is blurred and the focus does not land on one
   * of the other choices inside this component (i.e., when the whole
   * component loses focus)
   */
  onComponentBlur: _propTypes.default.func,
  onChange: _propTypes.default.func,

  /**
   * Sets the size of the checkbox or radio button
   */
  size: _propTypes.default.oneOf(['small']),

  /**
   * You can manually set the `type` if you prefer things to be less magical.
   * Otherwise, the type will be inferred by the other `props`, based
   * on what's best for accessibility and usability. If `multiple` is `true`, then
   * `checkbox` fields will be rendered. If less than 10 choices are passed in,
   * then `radio` buttons will be rendered.
   */
  type: _propTypes.default.oneOf(['checkbox', 'radio']),

  /**
   * @hide-prop [Deprecated] Adds `aria-label` attribute if component renders a select
   */
  ariaLabel: _propTypes.default.string
};
var _default = ChoiceList;
exports.default = _default;