"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.FormLabel = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var FormLabel = /*#__PURE__*/function (_React$PureComponent) {
  _inherits(FormLabel, _React$PureComponent);

  function FormLabel(props) {
    var _this;

    _classCallCheck(this, FormLabel);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(FormLabel).call(this, props));

    if (process.env.NODE_ENV !== 'production') {
      if (props.labelClassName) {
        console.warn("[Deprecated]: Please remove the 'labelClassName' prop in <FormLabel>, use 'textClassName' instead. This prop has been renamed and will be removed in a future release.");
      }
    }

    return _this;
  }

  _createClass(FormLabel, [{
    key: "errorMessage",
    value: function errorMessage() {
      if (this.props.errorMessage) {
        var classes = (0, _classnames.default)('ds-c-field__hint', 'ds-u-color--error', {
          'ds-u-color--error-light': this.props.inversed
        });
        return _react.default.createElement("span", {
          className: classes,
          id: "".concat(this.props.fieldId, "-message"),
          role: "alert"
        }, this.props.errorMessage);
      }
    }
  }, {
    key: "hint",
    value: function hint() {
      var hint = this.props.hint;
      var requirementLabel = this.props.requirementLabel;
      if (!hint && !requirementLabel) return;
      var classes = (0, _classnames.default)('ds-c-field__hint', {
        'ds-c-field__hint--inverse': this.props.inversed
      });
      var hintPadding = null;

      if (requirementLabel && hint) {
        if (typeof requirementLabel === 'string') {
          // Remove any existing spacing and punctuation
          requirementLabel = requirementLabel.trim().replace(/\.$/, ''); // Add punctuation after the requirementLabel so it doesn't run into the hint

          requirementLabel = requirementLabel + '.';
        } // Add space between hint and preceding requirementLabel


        hintPadding = ' ';
      }

      return _react.default.createElement("span", {
        className: classes
      }, requirementLabel, hintPadding, hint);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          fieldId = _this$props.fieldId,
          id = _this$props.id,
          children = _this$props.children;
      var ComponentType = this.props.component;
      var textClasses = (0, _classnames.default)(this.props.labelClassName, this.props.textClassName);
      var classes = (0, _classnames.default)('ds-c-label', this.props.className, {
        'ds-c-label--inverse': this.props.inversed
      });
      return _react.default.createElement(ComponentType, {
        className: classes,
        htmlFor: fieldId,
        id: id
      }, _react.default.createElement("span", {
        className: textClasses
      }, children), this.hint(), this.errorMessage());
    }
  }]);

  return FormLabel;
}(_react.default.PureComponent);

exports.FormLabel = FormLabel;
FormLabel.defaultProps = {
  component: 'label'
};
FormLabel.propTypes = {
  /**
   * Label text or HTML.
   */
  children: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]).isRequired,

  /**
   * Additional classes to be added to the root element.
   */
  className: _propTypes.default.string,

  /** The root HTML element used to render the label */
  component: _propTypes.default.oneOf(['label', 'legend']),

  /** Enable the error state by providing an error message. */
  errorMessage: _propTypes.default.node,

  /**
   * The ID of the field this label is for. This is used for the label's `for`
   * attribute and any related ARIA attributes, such as for the error message.
   */
  fieldId: _propTypes.default.string,

  /**
   * Additional hint text to display
   */
  hint: _propTypes.default.node,

  /**
   * A unique `id` for the label element. Useful for referencing the label from
   * other components with `aria-describedby`.
   */
  id: _propTypes.default.string,

  /**
   * Set to `true` to apply the "inverse" theme
   */
  inversed: _propTypes.default.bool,

  /**
   * @hide-prop [Deprecated] Additional classes to be added to the label text. Please use `textClassName` instead.
   */
  labelClassName: _propTypes.default.string,

  /**
   * Text showing the requirement (ie. "Optional", or "Required").
   * In most cases, this should be used to indicate which fields are optional.
   * See the [form guidelines]({{root}}/guidelines/forms/) for more info.
   */
  requirementLabel: _propTypes.default.node,

  /**
   * Additional classes to be added to the label text.
   */
  textClassName: _propTypes.default.string
};
var _default = FormLabel;
exports.default = _default;